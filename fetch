#!/bin/bash

wms=(berry awesome hyprland fusionwm dwm openbox twobwm pekwm)

red="\e[31m"
grn="\e[32m"
lblue="\e[94m"  
cyn="\e[36m"
blu="\e[34m"
prp="\e[35m"
rst="\e[0m"

color-echo() {
   printf "$1$cyn%10s : $rst$3\n" "$2"
}

# grabs the kernel info
print-kernel() {
   color-echo "$1" "Kernel" "$(uname -smr)"
}

# figures out how long the system been awake
print-uptime() {
   up=$(</proc/uptime)
   up=${up//.*}                # just grab the seconds, ditch the decimals
   days=$((${up}/86400))       # how many days from all those seconds
   hours=$((${up}/3600%24))    # leftover hours after days
   mins=$((${up}/60%60))       # and the minutes
   
   color-echo "$1" "Uptime" "$(echo $days'd '$hours'h '$mins'm')"
}

# shows what shell
print-shell() {
   color-echo "$1" "Shell" $SHELL
}

# digs out your CPU name from the system
print-cpu() {
   cpu=$(grep -m1 -i 'model name' /proc/cpuinfo)
   color-echo "$1" "CPU" "${cpu#*: }" # just the name, skip the "model name: " part
}


print-disk() {
   # grabbing total and used space from df, line 2 has the goods
   disk=$(df -h / | awk 'NR==2 {total=$2; used=$3; print used" / "total}')
   color-echo "$1" "Disk" "$disk"
}

# shows memory usage, handles old and new free command styles
print-mem() {
   if [[ $(free -m) =~ "buffers" ]]; then # old school format
      mem=$(free -m | awk 'NR==2 {total=$2} NR==3 {used=$3; print used"M / "total"M"}')
   else # newer format, keeps it simple
      mem=$(free -m | awk 'NR==2 {total=$2} NR==2 {used=$3; print used"M / "total"M"}')
   fi
   color-echo "$1" "Mem" "$mem"
}

# hunts down which window manager
print-wm() {
   for wm in ${wms[@]}; do          # loops through our list of WMs
      pid=$(pgrep -x -u $USER $wm) # checks if it’s running under your name
   if [[ "$pid" ]]; then
      color-echo "$1" "WM" $wm     # found one, let’s show it
      break
   fi
done
}

print-distro() {
   [[ -e /etc/os-release ]] && source /etc/os-release
   if [[ -n "$PRETTY_NAME" ]]; then
      color-echo "$1" "OS" "$PRETTY_NAME"
   else
      color-echo "$1" "OS" "not found" # oops, no distro info
   fi
}

print-tarballs() {
   local src_dir="/mnt/lfs/sources"
   local total_count=0

   # Count tarballs in /home/user/sources
   if [[ -d "$src_dir" ]]; then
      local count1=$(ls -1 "$src_dir"/*.tar* 2>/dev/null | wc -l)
      ((total_count += count1))
   fi

   # Count tarballs in /home/user/sources/blfs
   if [[ -d "$blfs_dir" ]]; then
      local count2=$(ls -1 "$blfs_dir"/*.tar* 2>/dev/null | wc -l)
      ((total_count += count2))
   fi

   color-echo "$1" "Tarballs" "$total_count"
}

# counts stuff in /usr/bin
print-packages() {
   local bin_dir="/usr/bin" # checking out the binaries
   if [[ -d "$bin_dir" ]]; then
      local count=$(ls -1 "$bin_dir" | wc -l) # how many files are chilling there
      color-echo "$1" "Packages" "$count"
   else
      color-echo "$1" "Packages" "directory not found" # rare, but you never know
   fi
}

# figures out what init system is running
print-init() {
   if [[ -L /sbin/init && $(readlink /sbin/init) =~ "systemd" ]]; then
      color-echo "$1" "Init" "systemd" # systemd’s the boss here
   elif [[ -f /sbin/init && $(file /sbin/init) =~ "SysV" ]]; then
      color-echo "$1" "Init" "sysVinit" # good ol’ sysVinit
   elif pidof runit >/dev/null; then
      color-echo "$1" "Init" "runit" # runit’s keeping things rolling
   elif pidof s6-supervise >/dev/null; then
      color-echo "$1" "Init" "s6" # s6 is in charge
   else
      color-echo "$1" "Init" "something else, not sure what" # who knows what’s running!
   fi
}

# grabs screen res
print-resolution() {
   res=$(xwininfo -root | grep 'geometry' | awk '{print $2}' | cut -d+ -f1)
   color-echo "$1" "Resolution" $res
}

# shows off your terminal colors
print-colors() {
   xrdb -load $HOME/.Xdefaults
   colors=($(xrdb -query | sed -n 's/.*color\([0-9]\)/\1/p' | sort -nu | cut -f2))

   echo -e "\e[1;37m
 Black      Red        Green      Yellow     Blue       Magenta    Cyan       White
 ───────────────────────────────────────────────────────────────────────────────────────\e[0m"
   for i in {0..7}; do echo -en "\e[$((30+$i))m █ ${colors[i]} \e[0m"; done
   echo
   for i in {8..15}; do echo -en "\e[1;$((22+$i))m █ ${colors[i]} \e[0m"; done
   echo -e "\n"
}

echo
print-distro      "${lblue}          #####         ${rst}"
print-kernel      "${lblue}         #######        ${rst}"
print-cpu         "${lblue}         ##O#O##        ${rst}"
print-mem         "${lblue}         #######        ${rst}"
print-shell       "${lblue}       ###########      ${rst}"
print-wm          "${lblue}      #############     ${rst}"
print-tarballs    "${lblue}     ###############    ${rst}"
print-packages    "${lblue}    #################   ${rst}"
print-init        "${lblue}    #################   ${rst}"
echo -e "${lblue}  ##################### ${rst}"
echo -e "${lblue}  ##################### ${rst}"
echo -e "${lblue}    #################   ${rst}"

echo
